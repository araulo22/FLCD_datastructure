let === (-1, -1)
id X === (8, 0)
, === (-1, -1)
id D === (4, 0)
: === (-1, -1)
int === (-1, -1)
; === (-1, -1)
id OK === (10, 0)
: === (-1, -1)
bool === (-1, -1)
; === (-1, -1)
start === (-1, -1)
read === (-1, -1)
( === (-1, -1)
id X === (8, 0)
) === (-1, -1)
; === (-1, -1)
id D === (4, 0)
:= === (-1, -1)
const === (2, 0)
; === (-1, -1)
id OK === (10, 0)
:= === (-1, -1)
id TRUE === (0, 0)
; === (-1, -1)
while === (-1, -1)
id D === (4, 0)
< === (-1, -1)
( === (-1, -1)
id X === (8, 0)
/ === (-1, -1)
const === (2, 0)
) === (-1, -1)
do === (-1, -1)
start === (-1, -1)
if === (-1, -1)
( === (-1, -1)
id X === (8, 0)
% === (-1, -1)
id D === (4, 0)
) === (-1, -1)
= === (-1, -1)
const === (0, 1)
then === (-1, -1)
start === (-1, -1)
id OK === (10, 0)
:= === (-1, -1)
id FALSE === (11, 0)
; === (-1, -1)
id D === (4, 0)
:= === (-1, -1)
id X === (8, 0)
; === (-1, -1)
end === (-1, -1)
else === (-1, -1)
id D === (4, 0)
:= === (-1, -1)
id D === (4, 0)
+ === (-1, -1)
const === (1, 0)
end === (-1, -1)
write === (-1, -1)
( === (-1, -1)
id OK === (10, 0)
) === (-1, -1)
; === (-1, -1)
end === (-1, -1)
